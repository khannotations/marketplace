<!doctype html>
<html>
  <head>
    <title>Yale Projects Board</title>
    <link href='<%= asset_path "logo-small.png" %>' rel='shortcut icon'>
    <!-- So meta, bro -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=2">
    <meta content='Students, find projects! Projects, find students!' name="description">
    <meta content='learning' name='keywords'>
    <!-- Facebook -->
    <meta property="og:title" content="Yale Projects Board" />
    <meta property="og:type" content="website" />
    <meta property="og:url" content="http://yale.projectsboard.com" />
    <!-- Fonts -->
    <link href='http://fonts.googleapis.com/css?family=Glegoo:400|Roboto:100,400,700' rel='stylesheet' type='text/css'>
    <!-- Stylesheets -->
    <%= stylesheet_link_tag "application", :media => "all" %>
    <%= csrf_meta_tags %>
  </head>
  <body ng-app='Marketplace'>
    <%= yield %>
    <%= javascript_include_tag "application" %>
    
    <!-- Analytics -->
    <script>
    /**
     * Creates a temporary global ga object and loads analytics.js.
     * Paramenters o, a, and m are all used internally.  They could have been declared using 'var',
     * instead they are declared as parameters to save 4 bytes ('var ').
     *
     * @param {Window}      i The global context object.
     * @param {Document}    s The DOM document object.
     * @param {string}      o Must be 'script'.
     * @param {string}      g URL of the analytics.js script. Inherits protocol from page.
     * @param {string}      r Global name of analytics object.  Defaults to 'ga'.
     * @param {DOMElement?} a Async script tag.
     * @param {DOMElement?} m First script tag in document.
     */
      (function(i, s, o, g, r, a, m){
        i['GoogleAnalyticsObject'] = r; // Acts as a pointer to support renaming.

        // Creates an initial ga() function.  The queued commands will be executed once analytics.js loads.
        i[r] = i[r] || function() {
          (i[r].q = i[r].q || []).push(arguments)
        },

        // Sets the time (as an integer) this tag was executed.  Used for timing hits.
        i[r].l = 1 * new Date();

        // Insert the script tag asynchronously.  Inserts above current tag to prevent blocking in
        // addition to using the async attribute.
        a = s.createElement(o),
        m = s.getElementsByTagName(o)[0];
        a.async = 1;
        a.src = g;
        m.parentNode.insertBefore(a, m)
      })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');

      ga('create', 'UA-57388380-1', {
        'cookieDomain': 'none'
      });; // Creates the tracker with default parameters.
      
      //ga('send', 'pageview');            // Sends a pageview hit.
    </script>
    <!-- End Analytics -->



  </body>
</html>
